# version is optional. When not specified it is assumed it is 1.0
version: 1.0

# These secrets will be pushed in the vault at secret/hub/test The vault will
# have secret/hub/imageregistry with account and token as keys with their associated
# values (secrets)
secrets:
  # NEVER COMMIT THESE VALUES TO GIT
  imageregistry:
    # Quay -> Robot Accounts -> Robot Login
    account: test-account
    token:   test-quay-token

  git:
    # Go to: https://github.com/settings/tokens
    username: test-user
    token: test-git-token

  aws:
    s3Secret: test-secret

  # The cluster_xxxx pattern is used for creating externalSecrets that
  # will be used by ArgoCD to push manifests to other clusters.
  #
  # Create a service account with enough permissions and extract the token
  #
  # CLUSTER_TOKEN=$(oc describe secret -n default argocd-external-token | grep 'token:' | awk '{print$2}')
  # CLUSTER_CA=$(oc extract -n openshift-config cm/kube-root-ca.crt --to=- --keys=ca.crt | base64 | awk '{print}' ORS='')
  cluster_example:
    server: https://api.example.openshiftapps.com:6443
    bearerToken: <bearer_token>

# This will create the vault key secret/hub/cluster_example_ca which will have two
# properties 'b64content' and 'content' which will be the base64-encoded
# content and the normal content respectively
files:
  cluster_example_ca: /path/to/ca.file

# These secrets will be pushed in the vault at secret/region1/test The vault will
# have secret/region1/test with secret1 and secret2 as keys with their associated
# values (secrets)
secrets.region1:
  test:
    secret1: foo1
    secret2: bar1

# This will create the vault key secret/region2/testbar which will have two
# properties 'b64content' and 'content' which will be the base64-encoded
# content and the normal content respectively
files.region2:
  testbar: ~/ca.crt
