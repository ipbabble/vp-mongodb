# This playbook fetches the hub cluster's CAbundle from ACM's objects
# and puts it in a secret inside the imperative namespace
---
- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  vars:
    ns: imperative
  tasks:
    - name: Find hub cluster
      kubernetes.core.k8s_info:
        kind: Secret
        name: hub-kubeconfig-secret
        namespace: open-cluster-management-agent
      register: hub_cluster

    - name: Do nothing when no managed clusters are found
      ansible.builtin.meta: end_play
      when: hub_cluster.resources | length == 0 or hub_cluster.failed or not hub_cluster.api_found

    - name: Set resource fact
      ansible.builtin.set_fact:
        resource: "{{ hub_cluster['resources'][0] }}"

    - name: Do nothing when no kubeconfig is not present yet
      ansible.builtin.meta: end_play
      when:
        - "'data' not in resource"
        - "'kubeconfig' not in resource.data"

    # FIXME(bandini) The assumption here is that there is a single hub cluster for each managed cluster
    #
    # oc extract secret/hub-kubeconfig-secret --keys=kubeconfig --to=- -n open-cluster-management-agent
    # apiVersion: v1
    # clusters:
    # - cluster:
    #     certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SU...
    #     server: https://api.bandini-dc.blueprints.rhecoeng.com:6443
    #   name: default-cluster
    - name: Get hub cluster facts
      ansible.builtin.set_fact:
        # kubeconfig is just a b64-econded yaml
        hub_cluster_kubeconfig: "{{ resource.data.kubeconfig | b64decode | from_yaml }}"

    - name: Set CA fact
      ansible.builtin.set_fact:
        # The .get() call is needed because the key has dashes in it
        hub_cluster_ca: "{{ hub_cluster_kubeconfig.clusters[0].cluster.get('certificate-authority-data') }}"

    - name: Create secret with managed cluster's CA
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: "hub"
            namespace: "{{ ns }}"
          data:
            caBundle: "{{ hub_cluster_ca }}"
          type: Opaque
